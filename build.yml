# Repo: FirelyTeam/azure-pipeline-templates
# File: build.yml

parameters:
  # Default values
- name : dotNetCoreVersion
  type: string
  default: '3.1.102' # can also be use with wildcards:  latest minor version of 3. , use '3.x'
  displayName: 'dotnet core version'
- name: useVersionSuffix
  type: boolean
  default: true  # if true, the build number will be added as or to the existing version suffix
- name: propsFile
  type: string
  default: '' # used for versionSuffix, if not empty, the versionSuffix will be read from the props file
- name: restoreDependencies
  type: boolean
  default: false # if true, dependencies will be restored before building
- name: nuGetServiceConnections
  type: string
  default: '' # Service connection credentials for feeds outside this organization. 
- name: nuGetSources
  type: string
  default: --source https://nuget.pkg.github.com/FirelyTeam/index.json # sources to check for dependencies, other than the normal nuget.org feed
- name: packageArtifacts
  type: boolean
  default: false # if true, the artifacts will be packaged
- name: publishArtifacts
  type: boolean
  default: false # if true, the artifacts will be published
- name: packageArtifactName
  type: string
  default: 'NuGetPackages' # name of the artifact to package
- name: publishWebProjects
  type: boolean
  default: false # if true, the web projects will be published
- name: zipAfterPublish
  type: boolean
  default: false # if true, the published artifacts will be zipped
- name: checkoutSubmodules
  type: boolean
  default: false # if true, submodules will be checked out
- name: pool
  type: object
  default: {} # pool to use for the build
- name: testFilter
  type: string
  default: '' # filter for unit tests; all tests by default
- name: numberOfDaysRetainmentForReleaseBuild
  type: number
  default: 365 # number of days to retain the build
- name: isReleaseBuildExpression
  type: string
  default: startswith(variables['Build.SourceBranch'], 'refs/tags/v') # if evaluated to true, the build will be retained for the provided duration
- name: checkoutSteps 
  type: stepList 
  default: [] 

jobs:
- job: Build
  pool: ${{ parameters.pool }}
  steps:
  - task: DotNetCoreInstaller@2
    inputs:
      version: ${{ parameters.dotNetCoreVersion }}

  - checkout: self
    ${{ if eq(parameters.checkoutSubmodules, 'true') }}:
      submodules: true

  ## retrieve the version suffix from the props file and set it as a variable
  - powershell: |
      [string]$propsFile = '${{ parameters.propsFile }}'
      [string]$versionSuffix = ''

      if ([string]::IsNullOrEmpty($propsFile) -eq $false)
      {
        $xml = [xml](get-content $propsFile)      
        #Get the suffix version 
        $versionSuffix = $xml.Project.PropertyGroup.VersionSuffix
        $versionSuffix = $versionSuffix.Trim()      
      }  

      Write-Host "Version Suffix: $versionSuffix"
      Write-Host "##vso[task.setvariable variable=VersionSuffix]$versionSuffix"
    displayName: 'Retrieve version suffix'

  - powershell: |    
      Write-Host "Updating Build Number to Version Suffix"

      [string]$versionSuffix = '$(VersionSuffix)'
      if ([string]::IsNullOrEmpty($versionSuffix)) 
      {
        $versionSuffix = $env:BUILD_BUILDNUMBER
      }
      else 
      {
        $versionSuffix = $versionSuffix + "-" + $env:BUILD_BUILDNUMBER
      }    

      Write-Host "Updated version Suffix: $versionSuffix"
      Write-Host "##vso[task.setvariable variable=VersionSuffix]$versionSuffix"
    displayName: 'Add buildnumber to version suffix'
    condition: and(succeeded(), eq('${{ parameters.useVersionSuffix }}', 'true'))

  - powershell: |    
      Write-Host "Determining if version suffix should be used"
      
      [string]$useVersionSuffix = 'true'
      [string]$versionSuffix = '$(VersionSuffix)'

      Write-Host "Version Suffix: $versionSuffix"

      if ([string]::IsNullOrEmpty($versionSuffix)) 
      {
        $useVersionSuffix = 'false'
      }
      
      Write-Host "Use Version Suffix: $useVersionSuffix"
      Write-Host "##vso[task.setvariable variable=UseVersionSuffix]$useVersionSuffix"
    displayName: 'Determine version suffix use'

  - ${{ if eq(parameters.restoreDependencies, 'true') }}:
    - template: restore.yml
      parameters:
        nuGetServiceConnections: ${{ parameters.nuGetServiceConnections }}
        nuGetSources: ${{ parameters.nuGetSources }}
      
  - script: dotnet build --configuration $(buildConfiguration) --no-restore
    displayName: 'dotnet build $(buildConfiguration) with no restore'
    condition: and(succeeded(), and(eq('${{ parameters.restoreDependencies }}', 'true'), eq(variables.UseVersionSuffix, 'false')))

  - script: dotnet build --configuration $(buildConfiguration) 
    displayName: 'dotnet build $(buildConfiguration)'
    condition: and(succeeded(), and(eq('${{ parameters.restoreDependencies }}', 'false'), eq(variables.UseVersionSuffix, 'false')))

  - script: dotnet build --configuration $(buildConfiguration) --version-suffix $(VersionSuffix) --no-restore
    displayName: 'dotnet build $(buildConfiguration) with version suffix and with no restore'
    condition: and(succeeded(), and(eq('${{ parameters.restoreDependencies }}', 'true'), eq(variables.UseVersionSuffix, 'true')))

  - script: dotnet build --configuration $(buildConfiguration) --version-suffix $(VersionSuffix)
    displayName: 'dotnet build $(buildConfiguration) with version suffix'
    condition: and(succeeded(), and(eq('${{ parameters.restoreDependencies }}', 'false'), eq(variables.UseVersionSuffix, 'true')))

  - task: PowerShell@2
    name: OutputVersion
    displayName: Output Version
    inputs:
      failOnStderr: true
      targetType: 'inline'
      script: |
        [string]$propsFile = '${{ parameters.propsFile }}'
        [string]$versionPrefix = ''
        [string]$version = ''

        if ([string]::IsNullOrEmpty($propsFile) -eq $true)
        {
           Write-Host "No props file specified, not setting version output variable."
           return
        }

        $xml = [xml](get-content $propsFile)      
        #Get the suffix version 
        $versionPrefix = $xml.Project.PropertyGroup.VersionPrefix
        $versionPrefix = $versionPrefix.Trim()
        $versionSuffix = '$(VersionSuffix)'
        $useVersionSuffix = '$(UseVersionSuffix)'
        
        Write-Host "Version Prefix: $versionPrefix, version suffix: $versionSuffix, use version suffix: $useVersionSuffix"
        
        if ($useVersionSuffix -eq 'true' -and [string]::IsNullOrEmpty($versionSuffix) -eq $false) {
          $version = $versionPrefix + "-" + $versionSuffix
        }
        else {
          $version = $versionPrefix
        }
        
        #Setting output variable $Version (used for VSTS) 
        Write-Host "##vso[task.setvariable variable=Version;isOutput=true]$version" 

  - task: DotNetCoreCLI@2
    displayName: 'dotnet test UnitTests with filter'
    condition: and(succeeded(), ne('${{ parameters.testFilter }}', ''))
    inputs:
      command: test
      projects: '**/*Tests/*Tests.csproj'
      arguments: '--configuration $(buildConfiguration) --no-restore --filter ${{ parameters.testFilter }}'

  - task: DotNetCoreCLI@2
    displayName: 'dotnet test UnitTests'
    condition: and(succeeded(), eq('${{ parameters.testFilter }}', ''))
    inputs:
      command: test
      projects: '**/*Tests/*Tests.csproj'
      arguments: '--configuration $(buildConfiguration) --no-restore'

  - template: strongNameSigning.yml
    parameters:
      checkoutSteps: ${{ parameters.checkoutSteps }}
      signingKeyFileName: 'FhirMetrics.snk'
      filesForSigning: '$(Build.SourcesDirectory)\src\Fhir.Metrics\bin\Release\*\Fhir.Metrics.dll'

  - ${{ if eq(parameters.packageArtifacts, 'true') }}:
    - template: package.yml
      parameters:
        artifactName: ${{parameters.packageArtifactName}}
        useVersionSuffix: ${{ parameters.useVersionSuffix }}
        versionSuffix: $(VersionSuffix)
  
  - ${{ if eq(parameters.publishArtifacts, 'true') }}:
    - template: publish.yml
      parameters:
        useVersionSuffix: ${{ parameters.useVersionSuffix }}
        publishWebProjects: ${{ parameters.publishWebProjects }}
        zipAfterPublish: ${{ parameters.zipAfterPublish }}
        versionSuffix: $(VersionSuffix)

  # Retain the build if it is a release build
  - template: retainBuild.yml
    parameters:
      numberOfDaysRetainment: ${{ parameters.numberOfDaysRetainmentForReleaseBuild }}
      condition: and(succeeded(), ${{ parameters.isReleaseBuildExpression }})
