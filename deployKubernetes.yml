# Repo: FirelyTeam/azure-pipeline-templates
# File: deployKubernetes.yml 

# This Azure Pipeline template is used to deploy a Dockerized application packaged as a helm chart to a Kubernetes cluster.

parameters:
- name: deploymentJobName
  type: string
  default: 'deployToKubernetes'
  displayName: 'Name of the deployment job'
- name: displayName
  type: string
  default: 'Deploy to Kubernetes'
  displayName: 'Display name of this deployment job'
- name: environment
  type: string
  displayName: 'Target environment name'
- name: kubernetesServiceConnection
  type: string
  displayName: 'Name of the Kubernetes Service Connection in Azure Devops'
- name: helmVersion
  type: string
  default: 'latest'
  displayName: 'Helm version to install'
- name: kubectlVersion
  type: string
  default: 'latest'
  displayName: 'Kubectl version to install'
- name: localValues
  type: string
  displayName: 'Relative path to the values.yaml file on the local repository'
- name: infraValues
  type: string
  displayName: 'Relative path to the common values.yaml file on the infrastructure repository'
- name: infraRepositoryName
  type: string
  displayName: 'Name of the infrastructure repository' 
- name: helmChartRepositories
  type: object
  default: []
  # for example:
  # - name: firely
  #   repo: https://firely.azurecr.io/helm
  # - name: bitnami
  #   repo: https://charts.bitnami.com/bitnami
  displayName: 'Helm chart repositories of the application, format name: and repo:'
- name: helmChartName
  type: string
  displayName: 'Name of the Helm chart of the application'
- name: helmChartVersion
  type: string
  displayName: 'Version of the Helm chart of the application' 
- name: image
  type: string
  displayName: 'The Docker image including the registry, i.e firely.azurecr.io/firely/server'
- name: imageTag
  type: string 
  displayName: 'Tag of Docker image'
- name: deployTimeout
  type: string
  default: '10m'
  displayName: 'Timeout for the deployment with Helm'
- name: namespace
  type: string
  default: 'default'
  displayName: 'The namespace of the Kubernetes cluster where the application will be deployed'
- name: releaseName
  type: string
  displayName: 'Name of the release used by Helm'
- name: checkoutSteps
  type: stepList
  default: 
  - checkout: self
    path: localRepo
    displayName: 'Checkout local repository'
  displayName: 'Checkout steps for the local repository.'

jobs:
- deployment: ${{ parameters.deploymentJobName }}
  environment: ${{ parameters.environment }}
  displayName: ${{ parameters.displayName }}
  strategy:
    runOnce:
      deploy:
        steps:
        - download: none
        - ${{ each step in parameters.checkoutSteps }}:
          - ${{ step }}
        - checkout: ${{ parameters.infraRepositoryName }}
          path: infraRepo
          displayName: 'Checkout infrastructure repository'
        - task: HelmInstaller@1
          displayName: 'Install Helm ${{ parameters.helmVersion }}'
          inputs:
            helmVersionToInstall: ${{ parameters.helmVersion }}
        - task: KubectlInstaller@0
          displayName: 'Install kubectl ${{ parameters.kubectlVersion }}'
          inputs:
            kubectlVersion: ${{ parameters.kubectlVersion }}
        
        - powershell: |
            # check if the Helm value files provided as parameters exists in the repositories

            Write-Host "Current Directory: $(Get-Location)"
            Write-Host "Pipeline.Workspace: $(Pipeline.Workspace)"
            Write-Host "Listing contents of Pipeline.Workspace:"
            ls $(Pipeline.Workspace)

            Write-Host "Listing contents of local repository (using Pipeline.Workspace):"
            ls $(Pipeline.Workspace)/localRepo

            Write-Host "Listing contents of infrastructure repository (using Pipeline.Workspace):"
            ls $(Pipeline.Workspace)/infraRepo

            $filesToCheck = @("$(Pipeline.Workspace)/localRepo/${{ parameters.localValues }}", "$(Pipeline.Workspace)/infraRepo/${{ parameters.infraValues }}")
            foreach ($filePath in $filesToCheck) {
                if (-not (Test-Path $filePath)) {
                    Write-Host "File $filePath does not exist"
                    Exit 1
                }
                else {
                    Write-Host "Success: File $filePath exists"
                }
            }
          displayName: 'Check if value files provided as parameters exists'

        - task: HelmDeploy@0
          displayName: 'helm add repo stable'
          inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceConnection: ${{ parameters.kubernetesServiceConnection }}
            command: repo
            arguments: 'add "stable" "https://charts.helm.sh/stable" --force-update'
        
        - ${{ each helmChartRepository in parameters.helmChartRepositories }}:
          - task: HelmDeploy@0
            displayName: 'helm add repo ${{ helmChartRepository.name }}'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceConnection: ${{ parameters.kubernetesServiceConnection }}
              command: repo
              arguments: 'add ${{ helmChartRepository.name }} ${{ helmChartRepository.repo }} --force-update'
              failOnStderr: true  
            
        - task: HelmDeploy@0
          displayName: 'helm update repo '
          inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceConnection: ${{ parameters.kubernetesServiceConnection }}
            command: repo
            arguments: update
            failOnStderr: true

        - task: HelmDeploy@0
          displayName: 'helm upgrade ${{ parameters.releaseName }}'
          inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceConnection: ${{ parameters.kubernetesServiceConnection }}
            command: upgrade
            chartName: ${{ parameters.helmChartName }}
            releaseName: ${{ parameters.releaseName }}
            overrideValues: 'image.tag=${{ parameters.imageTag }},image.repository=${{ parameters.image }}'
            valueFile: '$(Pipeline.Workspace)/localRepo/${{ parameters.localValues }}'
            arguments: '--timeout ${{ parameters.deployTimeout }} --atomic --version ${{ parameters.helmChartVersion }} --namespace ${{ parameters.namespace }} --create-namespace -f $(Pipeline.Workspace)/infraRepo/${{ parameters.infraValues }}'
            failOnStderr: false            
