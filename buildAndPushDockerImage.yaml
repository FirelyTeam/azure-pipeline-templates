# Repo: FirelyTeam/azure-pipeline-templates
# File: buildAndPushDockerImage.yml

parameters:
- name: publishedCodeArtifactName
  type: string
  default: 'ZipDeployArchive'
  displayName: 'Published Code Artifact Name'
  description: 'The name of the artifact that contains the published code'
- name: containerRegistry
  type: string
  displayName: 'Azure Container Registry Connection'
  description: 'The name of the Azure Container Registry connection'
  default: 'AzureContainerRegistryConnection'
- name: addLatestTag
  type: boolean
  displayName: 'Add latest tag'
  default: true
  description: 'Add the latest tag to the image'
- name: dockerRegistry
  type: string
  displayName: 'Firely Docker Registry'
  default: 'firely.azurecr.io'
  description: 'The name of the Firely Docker Registry'
- name: imageRepositoryName
  type: string
  displayName: 'Firely Server Image Repository Name'
  default: 'firely/server'
  description: 'The name of the Firely Server Image Repository'

jobs:
- job: createDockerImage
  displayName: Docker image
  steps:
  - task: DownloadPipelineArtifact@2
    displayName: 'Download published code artifact'
    inputs:
      artifactName: ${{ parameters.publishedCodeArtifactName }}
      targetPath: '$(System.DefaultWorkingDirectory)'
  - task: ExtractFiles@1
    displayName: 'Extract zip files'
    inputs:
      archiveFilePatterns: '**/*.zip' 
      destinationFolder: $(System.DefaultWorkingDirectory)/target
      cleanDestinationFolder: true
      overwriteExistingFiles: false
  - task: Docker@2
    displayName: Docker Login
    inputs:
      containerRegistry: ${{ parameters.containerRegistry }}
      command: "login"
  - bash: |
      docker run --privileged --rm tonistiigi/binfmt --install arm64
      docker run --privileged --rm tonistiigi/binfmt
      docker buildx create --use
      docker buildx build --platform linux/amd64,linux/arm64 \
        --build-arg=PUBLISHED_CODE=azuredevops \
        --tag ${{ parameters.dockerRegistry }}/${{ parameters.imageRepositoryName }}:$(Build.BuildNumber) \
        --push \
        --file $(Build.SourcesDirectory)/src/Vonk.Server/Dockerfile \
        $(System.DefaultWorkingDirectory)/target
    displayName: Build and Push Docker image on ${{ parameters.dockerRegistry }}
  - bash: |
      docker tag ${{ parameters.dockerRegistry }}/${{ parameters.imageRepositoryName }}:$(Build.BuildNumber) ${{ parameters.dockerRegistry }}/${{ parameters.imageRepositoryName }}:latest
      docker push ${{ parameters.dockerRegistry }}/${{ parameters.imageRepositoryName }}:latest
    displayName: Tag and push latest image on ${{ parameters.dockerRegistry }}
    condition: ${{ parameters.addLatestTag }}